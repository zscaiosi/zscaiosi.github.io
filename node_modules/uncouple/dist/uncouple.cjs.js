/*!
 * uncouple v0.2.0
 * (c) 2018-present Vitor Cavalcanti <vitorluizc@outlook.com> (https://vitorluizc.github.io)
 * Released under the MIT License.
 */
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var entries = _interopDefault(require('object.entries'));
var assign = _interopDefault(require('object.assign'));
var getOwnPropertyDescriptors = _interopDefault(require('object.getownpropertydescriptors'));

var map = Function.call.bind(Array.prototype.map);

var filter = Function.call.bind(Array.prototype.filter);

var reduce = Function.call.bind(Array.prototype.reduce);

var obj;
var toProperty = function (ref) {
  var name = ref[0];
  var descriptor = ref[1];

  var property = assign({}, descriptor, { name: name });
  return property;
};

var getProperties = function (object) {
  var descriptors = getOwnPropertyDescriptors(object);
  var properties = map(entries(descriptors), toProperty);
  return properties;
};

var isMethod = function (property) { return property.name !== 'constructor' && typeof property.name === 'string' && typeof property.value === 'function'; };

var withMethod = function (object, ref) {
  var name = ref.name;
  var value = ref.value;

  var result = assign({}, object, ( obj = {}, obj[name] = Function.call.bind(value), obj));
  return result;
};

var uncouple = function (object) {
  var properties = getProperties(object.prototype || object);
  var methods = filter(properties, isMethod);
  var uncoupled = reduce(methods, withMethod, {});
  return uncoupled;
};

module.exports = uncouple;
